diff --git a/node_modules/node-aes-cmac/lib/aes-cmac.js b/node_modules/node-aes-cmac/lib/aes-cmac.js
index db0d4fd..cb9280d 100644
--- a/node_modules/node-aes-cmac/lib/aes-cmac.js
+++ b/node_modules/node-aes-cmac/lib/aes-cmac.js
@@ -1,8 +1,8 @@
 var crypto = require('crypto');
 var bufferTools = require('./buffer-tools.js');
 
-var const_Zero = new Buffer('00000000000000000000000000000000', 'hex');
-var const_Rb = new Buffer('00000000000000000000000000000087', 'hex');
+var const_Zero = Buffer.from('00000000000000000000000000000000', 'hex');
+var const_Rb = Buffer.from('00000000000000000000000000000087', 'hex');
 var const_blockSize = 16;
 
 exports.generateSubkeys = function (key) {
@@ -22,11 +22,11 @@ exports.generateSubkeys = function (key) {
 };
 
 function aes(key, message) {
-  var keyLengthToCipher = { 16: 'aes128', 24: 'aes192', 32: 'aes256' };
+  var keyLengthToCipher = { 16: 'AES-128-ECB', 24: 'AES-192-ECB', 32: 'AES-256-ECB' };
   if (!keyLengthToCipher[key.length]) {
     throw new Error('Keys must be 128, 192, or 256 bits in length.');
   }
-  var cipher = crypto.createCipheriv(keyLengthToCipher[key.length], key, const_Zero);
+  var cipher = crypto.createCipheriv(keyLengthToCipher[key.length], key, null);
   var result = cipher.update(message);
   cipher.final();
   return result;
@@ -51,7 +51,7 @@ exports.aesCmac = function (key, message) {
     lastBlock = bufferTools.xor(getPaddedMessageBlock(message, lastBlockIndex), subkeys.subkey2);
   }
 
-  var x = new Buffer('00000000000000000000000000000000', 'hex');
+  var x = Buffer.from('00000000000000000000000000000000', 'hex');
   var y;
 
   for (var index = 0; index < lastBlockIndex; index++) {
@@ -63,7 +63,7 @@ exports.aesCmac = function (key, message) {
 };
 
 function getMessageBlock(message, blockIndex) {
-  var block = new Buffer(const_blockSize);
+  var block = Buffer.alloc(const_blockSize);
   var start = blockIndex * const_blockSize;
   var end = start + const_blockSize;
 
@@ -73,7 +73,7 @@ function getMessageBlock(message, blockIndex) {
 }
 
 function getPaddedMessageBlock(message, blockIndex) {
-  var block = new Buffer(const_blockSize);
+  var block = Buffer.alloc(const_blockSize);
   var start = blockIndex * const_blockSize;
   var end = message.length;
 
diff --git a/node_modules/node-aes-cmac/lib/buffer-tools.js b/node_modules/node-aes-cmac/lib/buffer-tools.js
index 6935880..29c5902 100644
--- a/node_modules/node-aes-cmac/lib/buffer-tools.js
+++ b/node_modules/node-aes-cmac/lib/buffer-tools.js
@@ -1,5 +1,5 @@
 exports.bitShiftLeft = function (buffer) {
-  var shifted = new Buffer(buffer.length);
+  var shifted = Buffer.alloc(buffer.length);
   var last = buffer.length - 1;
   for (var index = 0; index < last; index++) {
     shifted[index] = buffer[index] << 1;
@@ -13,7 +13,7 @@ exports.bitShiftLeft = function (buffer) {
 
 exports.xor = function (bufferA, bufferB) {
   var length = Math.min(bufferA.length, bufferB.length);
-  var output = new Buffer(length);
+  var output = Buffer.alloc(length);
   for (var index = 0; index < length; index++) {
     output[index] = bufferA[index] ^ bufferB[index];
   }
